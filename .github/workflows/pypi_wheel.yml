name: PyPI-wheel

on:
  release:
    types:
      # Note: editing the prerelease then marking as release does not trigger
      # this pipeline
      # - prereleased
      - released
  workflow_dispatch:

jobs:
  release-pypi-linux:
    runs-on: ubuntu-latest
    env:
      img: pyscf/gpu4pyscf-sdk:0.1
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build wheels
      run: |
        docker run --rm -v ${{ github.workspace }}:/src/gpu4pyscf:rw --workdir=/src/gpu4pyscf \
        ${{ env.img }} \
        bash -exc 'export CIBW_BUIL=cp39-manylinux_x86_64 && \
           python3 -m pip install cibuildwheel==2.16.0 && \
           python3 -m cibuildwheel --output-dir wheelhouse'
    - name: List available wheels
      run: |
        ls ${{ github.workspace }}/wheelhouse
    - name: Publish to PyPI
      run: |
          pip install twine
          export TWINE_USERNAME=__token__
          export TWINE_PASSWORD="${{ secrets.PYPI_API_TOKEN }}"
          twine upload --verbose "/wheelhouse/*"

#  release-pypi-cibuildwheel:
#    name: Build wheels with cibuildwheel
#    strategy:
#      matrix:
#        python-version: ["3.9"]
#    runs-on: ubuntu-20.04
#    steps:
#    - uses: actions/checkout@v3
#    # Used to host cibuildwheel
#    - uses: actions/setup-python@v4
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install cibuildwheel
#      run: python -m pip install cibuildwheel==2.16.0
#    - name: Build wheels
#      run: python -m cibuildwheel --output-dir wheelhouse
#      # to supply options, put them in 'env', like:
#      env:
#        CIBW_BUILD: cp39-manylinux_x86_64
#    - name: Publish to PyPI
#      run: |
#          pip install twine
#          export TWINE_USERNAME=__token__
#          export TWINE_PASSWORD="${{ secrets.PYPI_API_TOKEN }}"
#          twine upload --verbose /wheelhouse/*
