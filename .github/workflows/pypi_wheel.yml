name: PyPI-wheel

on:
  release:
    types:
      # Note: editing the prerelease then marking as release does not trigger
      # this pipeline
      # - prereleased
      - released
  workflow_dispatch:

jobs:
#  release-pypi-linux:
#    runs-on: ubuntu-latest
#    env:
#      img: pyscf/gpu4pyscf-sdk:0.1
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#    - name: Build wheels
#      run: |
#        docker run --rm -v ${{ github.workspace }}:/src/gpu4pyscf:rw --workdir=/src/gpu4pyscf \
#        ${{ env.img }} \
#        bash -exc 'export CIBW_BUIL=cp39-manylinux_x86_64 && \
#           python3 -m pip install cibuildwheel==2.16.0 && \
#           python3 -m cibuildwheel --output-dir wheelhouse'
#    - name: List available wheels
#      run: |
#        ls ${{ github.workspace }}/wheelhouse
#    - name: Publish to PyPI
#      run: |
#          pip install twine
#          export TWINE_USERNAME=__token__
#          export TWINE_PASSWORD="${{ secrets.PYPI_API_TOKEN }}"
#          twine upload --verbose "${{ github.workspace }}/wheelhouse/*"

  release-pypi-cibuildwheel:
    name: Build wheels with cibuildwheel
    strategy:
      matrix:
        python-version: ["3.9"]
    runs-on: ubuntu-20.04
    env:
      DEBIAN_FRONTEND: noninteractive
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility 
      NVIDIA_REQUIRE_CUDA: cuda>=11.7 brand=tesla,driver>=450,driver<451 brand=tesla,driver>=470,driver<471 brand=unknown,driver>=470,driver<471 brand=nvidia,driver>=470,driver<471 brand=nvidiartx,driver>=470,driver<471 brand=quadrortx,driver>=470,driver<471 brand=unknown,driver>=510,driver<511 brand=nvidia,driver>=510,driver<511 brand=nvidiartx,driver>=510,driver<511 brand=quadrortx,driver>=510,driver<511
      CUDA_HOME: /usr/local/cuda
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install cuda deps
      run: |
        echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64 /" > cuda.list
        sudo mv cuda.list /etc/apt/sources.list.d/cuda.list
        export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1
        curl -fsSL https://developer.download.nvidia.cn/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub | sudo apt-key add -
        sudo apt-get update
        sudo apt-get install -yq --no-install-recommends --fix-missing gnupg2 cuda-cudart-11-7=11.7.99-1 cuda-compat-11-7 cuda-libraries-11-7=11.7.1-1 cuda-nvtx-11-7=11.7.91-1 cuda-nvml-dev-11-7=11.7.50-1 cuda-command-line-tools-11-7=11.7.1-1 cuda-libraries-dev-11-7=11.7.1-1 cuda-minimal-build-11-7=11.7.1-1 libcublas-11-7=11.10.3.66-1 libcublas-dev-11-7=11.10.3.66-1 libcutensor1=1.6.0.3-1 libcutensor-dev=1.6.0.3-1
        sudo ln -s /usr/local/cuda-11.7 /usr/local/cuda
        export LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64:$LD_LIBRARY_PATH
        export PATH=/usr/local/cuda-11.7/bin:$PATH
        export CUDAToolkit_ROOT=/usr/local/cuda-11.7
        echo $PATH
        echo $LD_LIBRARY_PATH
        pip3 install -U --no-cache-dir pytest numpy cupy-cuda11x pyscf~=2.3 cmake
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.0
    - name: Build wheels
      run: |
        export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
        export PATH=$CUDA_HOME/bin:$PATH
        python -m cibuildwheel --output-dir wheelhouse
      # to supply options, put them in 'env', like:
      env:
        CIBW_BUILD: cp39-manylinux_x86_64
    - name: Publish to PyPI
      run: |
          pip install twine
          export TWINE_USERNAME=__token__
          export TWINE_PASSWORD="${{ secrets.PYPI_API_TOKEN }}"
          twine upload --verbose "${{ github.workspace }}/wheelhouse/*"
